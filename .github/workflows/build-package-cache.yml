name: Build Package Cache

on:
  push:
    branches:
      - master
      - main
    paths:
      - 'config/repositories.json'  # When repos added/removed

  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours (matches sync-repo-status)

  workflow_dispatch:  # Manual trigger

permissions:
  contents: write  # Need to commit cache file

jobs:
  build-cache:
    runs-on: [self-hosted, arc, the1studio, org]
    timeout-minutes: 20
    name: Scan repositories and build package cache
    outputs:
      stats_total: ${{ steps.stats.outputs.total }}
      stats_uptodate: ${{ steps.stats.outputs.uptodate }}
      stats_stale: ${{ steps.stats.outputs.stale }}
      stats_new: ${{ steps.stats.outputs.new }}
      triggered: ${{ steps.trigger_result.outputs.triggered }}
      no_dispatch: ${{ steps.trigger_result.outputs.no_dispatch }}
      failed: ${{ steps.trigger_result.outputs.failed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          # Fix APT sources to use HTTPS instead of HTTP (port 80 blocked)
          sudo sed -i 's|http://archive.ubuntu.com|https://archive.ubuntu.com|g' /etc/apt/sources.list
          sudo sed -i 's|http://security.ubuntu.com|https://security.ubuntu.com|g' /etc/apt/sources.list

          # Disable PPA repositories (have invalid HTTPS certificates)
          sudo mv /etc/apt/sources.list.d /etc/apt/sources.list.d.bak 2>/dev/null || true
          sudo mkdir -p /etc/apt/sources.list.d

          sudo apt-get update
          sudo apt-get install -y jq

          # Install GitHub CLI from official source
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Build package cache
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          ./scripts/build-package-cache.sh

      - name: Commit updated cache
        run: |
          # Check if there are changes (modified or untracked)
          if git status --porcelain config/package-cache.json | grep -q .; then
            echo "üìù Cache file has changes, committing..."
          else
            echo "‚ÑπÔ∏è  No changes to cache"
            exit 0
          fi

          git config user.name "UPM Auto Publisher Bot"
          git config user.email "noreply@the1studio.org"
          git add config/package-cache.json
          git commit -m "chore: Update package cache [skip ci]" \
                     -m "" \
                     -m "Updated package cache with current versions from GitHub and registry." \
                     -m "" \
                     -m "ü§ñ Generated with [Claude Code](https://claude.com/claude-code)" \
                     -m "" \
                     -m "Co-Authored-By: Claude <noreply@anthropic.com>"

          git push origin master || git push origin main

      - name: Check for stale packages
        id: check_stale
        run: |
          stale=$(jq '[.repositories | to_entries[] | .value.packages | to_entries[] | select(.value.version != .value.publishedVersion and .value.publishedVersion != null)] | length' config/package-cache.json)
          echo "stale_count=$stale" >> $GITHUB_OUTPUT

          if [ "$stale" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $stale stale package(s)"
          else
            echo "‚úÖ No stale packages"
          fi

      - name: Trigger publishing for stale packages
        id: trigger_result
        if: steps.check_stale.outputs.stale_count > 0
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "üöÄ Auto-triggering publishing workflows for stale packages..."
          echo ""

          triggered=0
          failed=0
          no_dispatch=0

          # Iterate through stale packages
          while IFS= read -r repo_entry; do
            repo_name=$(echo "$repo_entry" | jq -r '.key')

            # Process each stale package in this repository
            while IFS= read -r pkg_entry; do
              pkg_name=$(echo "$pkg_entry" | jq -r '.key')
              pkg_data=$(echo "$pkg_entry" | jq -r '.value')

              path=$(echo "$pkg_data" | jq -r '.path')
              current=$(echo "$pkg_data" | jq -r '.version')
              published=$(echo "$pkg_data" | jq -r '.publishedVersion')

              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "üì¶ $pkg_name"
              echo "   Repository: $repo_name"
              echo "   Current: $current ‚Üí Published: $published"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

              # Check if workflow exists
              if ! gh api "repos/$repo_name/actions/workflows/publish-upm.yml" >/dev/null 2>&1; then
                echo "   ‚ùå Workflow not found in $repo_name"
                echo "   Skipping..."
                failed=$((failed + 1))
                echo ""
                continue
              fi

              # Check if workflow has workflow_dispatch trigger
              workflow_content=$(gh api "repos/$repo_name/contents/.github/workflows/publish-upm.yml" \
                --jq '.content' 2>/dev/null | base64 -d 2>/dev/null || echo "")

              if ! echo "$workflow_content" | grep -q "workflow_dispatch:"; then
                echo "   ‚ö†Ô∏è  Workflow doesn't have workflow_dispatch trigger"
                echo "   This workflow needs to be updated with workflow_dispatch"
                echo ""
                echo "   To fix: The register-repos workflow will update it on next run"
                echo ""
                no_dispatch=$((no_dispatch + 1))
                continue
              fi

              # Trigger the workflow
              echo "   üöÄ Triggering workflow..."

              if gh workflow run publish-upm.yml \
                --repo "$repo_name" \
                --ref master 2>&1 || gh workflow run publish-upm.yml \
                --repo "$repo_name" \
                --ref main 2>&1; then
                echo "   ‚úÖ Workflow triggered successfully!"
                echo "   üìä Check status: https://github.com/$repo_name/actions/workflows/publish-upm.yml"
                triggered=$((triggered + 1))
              else
                echo "   ‚ùå Failed to trigger workflow"
                failed=$((failed + 1))
              fi

              echo ""
              sleep 2  # Rate limit protection

            done < <(echo "$repo_entry" | jq -c '.value.packages | to_entries[] | select(.value.version != .value.publishedVersion and .value.publishedVersion != null)')
          done < <(jq -c '.repositories | to_entries[]' config/package-cache.json)

          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìä Auto-Publish Summary"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚úÖ Triggered: $triggered"
          echo "‚ö†Ô∏è  Missing workflow_dispatch: $no_dispatch"
          echo "‚ùå Failed: $failed"
          echo ""

          if [ "$no_dispatch" -gt 0 ]; then
            echo "üí° To fix missing workflow_dispatch:"
            echo "   Workflows will be updated automatically on next register-repos run"
            echo "   Or manually add 'workflow_dispatch:' to the workflow file"
          fi

          # Save stats for summary and outputs
          echo "triggered=$triggered" >> $GITHUB_ENV
          echo "no_dispatch=$no_dispatch" >> $GITHUB_ENV
          echo "failed=$failed" >> $GITHUB_ENV

          echo "triggered=$triggered" >> $GITHUB_OUTPUT
          echo "no_dispatch=$no_dispatch" >> $GITHUB_OUTPUT
          echo "failed=$failed" >> $GITHUB_OUTPUT

      - name: Collect statistics
        id: stats
        if: always()
        run: |
          if [ ! -f config/package-cache.json ]; then
            echo "total=0" >> $GITHUB_OUTPUT
            echo "uptodate=0" >> $GITHUB_OUTPUT
            echo "stale=0" >> $GITHUB_OUTPUT
            echo "new=0" >> $GITHUB_OUTPUT
            echo "cache_exists=false" >> $GITHUB_OUTPUT
          else
            total=$(jq '[.repositories | to_entries[] | .value.packages | to_entries[]] | length' config/package-cache.json)
            uptodate=$(jq '[.repositories | to_entries[] | .value.packages | to_entries[] | select(.value.version == .value.publishedVersion)] | length' config/package-cache.json)
            stale=$(jq '[.repositories | to_entries[] | .value.packages | to_entries[] | select(.value.version != .value.publishedVersion and .value.publishedVersion != null)] | length' config/package-cache.json)
            new=$(jq '[.repositories | to_entries[] | .value.packages | to_entries[] | select(.value.publishedVersion == null)] | length' config/package-cache.json)

            echo "total=$total" >> $GITHUB_OUTPUT
            echo "uptodate=$uptodate" >> $GITHUB_OUTPUT
            echo "stale=$stale" >> $GITHUB_OUTPUT
            echo "new=$new" >> $GITHUB_OUTPUT
            echo "cache_exists=true" >> $GITHUB_OUTPUT
          fi

      - name: Summary
        if: always()
        run: |
          echo "# üì¶ Package Cache Build Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ ! -f config/package-cache.json ]; then
            echo "‚ùå Cache file not created" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          total=$(jq '[.repositories | to_entries[] | .value.packages | to_entries[]] | length' config/package-cache.json)
          updated=$(jq -r '.updated' config/package-cache.json)
          uptodate=$(jq '[.repositories | to_entries[] | .value.packages | to_entries[] | select(.value.version == .value.publishedVersion)] | length' config/package-cache.json)
          stale=$(jq '[.repositories | to_entries[] | .value.packages | to_entries[] | select(.value.version != .value.publishedVersion and .value.publishedVersion != null)] | length' config/package-cache.json)
          new=$(jq '[.repositories | to_entries[] | .value.packages | to_entries[] | select(.value.publishedVersion == null)] | length' config/package-cache.json)

          echo "## Statistics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Total packages**: $total" >> $GITHUB_STEP_SUMMARY
          echo "- **Last updated**: $updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Version Status" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Up-to-date: $uptodate" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ö†Ô∏è Stale (needs publish): $stale" >> $GITHUB_STEP_SUMMARY
          echo "- üÜï Not published: $new" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Show stale packages if any
          if [ "$stale" -gt 0 ]; then
            echo "## ‚ö†Ô∏è Packages Needing Publish" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            jq -r '.repositories | to_entries[] | .key as $repo | .value.packages | to_entries[] | select(.value.version != .value.publishedVersion and .value.publishedVersion != null) | "- **\(.key)** (\($repo)): \(.value.version) (published: \(.value.publishedVersion))"' config/package-cache.json >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Show auto-publish results
            if [ -n "${{ env.triggered }}" ]; then
              echo "---" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "## üöÄ Auto-Publish Results" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "- ‚úÖ **Triggered**: ${{ env.triggered }}" >> $GITHUB_STEP_SUMMARY
              echo "- ‚ö†Ô∏è **Missing workflow_dispatch**: ${{ env.no_dispatch }}" >> $GITHUB_STEP_SUMMARY
              echo "- ‚ùå **Failed**: ${{ env.failed }}" >> $GITHUB_STEP_SUMMARY
            fi
          fi

  notify-discord:
    runs-on: [self-hosted, arc, the1studio, org]
    needs: build-cache
    if: always()
    steps:
      - name: Send Discord notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ needs.build-cache.result }}
          title: "üì¶ UPM Package Cache Build"
          description: |
            **Workflow:** Build Package Cache
            **Trigger:** ${{ github.event_name }}
            **Branch:** `${{ github.ref_name }}`

            **üìä Statistics:**
            ‚Ä¢ Total Packages: `${{ needs.build-cache.outputs.stats_total || '0' }}`
            ‚Ä¢ ‚úÖ Up-to-date: `${{ needs.build-cache.outputs.stats_uptodate || '0' }}`
            ‚Ä¢ ‚ö†Ô∏è Stale: `${{ needs.build-cache.outputs.stats_stale || '0' }}`
            ‚Ä¢ üÜï Not Published: `${{ needs.build-cache.outputs.stats_new || '0' }}`

            **üöÄ Auto-Publish Results:**
            ‚Ä¢ Triggered: `${{ needs.build-cache.outputs.triggered || '0' }}`
            ‚Ä¢ Missing workflow_dispatch: `${{ needs.build-cache.outputs.no_dispatch || '0' }}`
            ‚Ä¢ Failed: `${{ needs.build-cache.outputs.failed || '0' }}`

            **üîó Links:**
            ‚Ä¢ [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            ‚Ä¢ [Cache File](${{ github.server_url }}/${{ github.repository }}/blob/master/config/package-cache.json)
          color: ${{ needs.build-cache.result == 'success' && '0x48C21B' || needs.build-cache.result == 'failure' && '0xFF0000' || '0xFFCC00' }}
          username: "THE 1 GAME STUDIO"
          avatar_url: "https://raw.githubusercontent.com/The1Studio/UPMAutoPublisher/master/.github/assets/the1studio-logo.png"
