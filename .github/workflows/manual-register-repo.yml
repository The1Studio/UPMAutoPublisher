name: Manual Repository Registration

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'Repository URL (e.g., https://github.com/The1Studio/UnityUtilities)'
        required: true
        type: string

jobs:
  register-repository:
    runs-on: [self-hosted, arc, the1studio, org]

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Use GH_PAT instead of GITHUB_TOKEN to allow triggering other workflows
          # GITHUB_TOKEN commits don't trigger workflows (security feature to prevent loops)
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 1

      - name: Validate repository URL
        run: |
          set -euo pipefail

          echo "🔍 Validating repository URL..."

          # Validate repository URL format
          if [[ ! "${{ inputs.repo_url }}" =~ ^https://github\.com/The1Studio/[a-zA-Z0-9._-]+$ ]]; then
            echo "❌ Invalid repository URL format"
            echo ""
            echo "Expected format:"
            echo "  https://github.com/The1Studio/RepositoryName"
            echo ""
            echo "Examples:"
            echo "  ✅ https://github.com/The1Studio/UITemplate"
            echo "  ✅ https://github.com/The1Studio/TheOneFeature"
            echo "  ✅ https://github.com/The1Studio/PlayableLabs"
            echo ""
            echo "Got:"
            echo "  ❌ ${{ inputs.repo_url }}"
            echo ""

            # Check if user provided a workflow/actions URL
            if [[ "${{ inputs.repo_url }}" =~ /actions/ ]]; then
              echo "⚠️  It looks like you provided a GitHub Actions workflow URL."
              echo "   Please provide the repository URL instead (not the workflow run URL)."
              echo ""
              # Try to extract the repository URL from the actions URL
              REPO_URL=$(echo "${{ inputs.repo_url }}" | sed -E 's|(https://github.com/[^/]+/[^/]+)/.*|\1|')
              echo "Did you mean: $REPO_URL ?"
            fi

            exit 1
          fi

          # Extract repository name for display
          REPO_NAME=$(echo "${{ inputs.repo_url }}" | sed 's|https://github.com/The1Studio/||')
          echo "Repository: $REPO_NAME"
          echo "✅ Repository URL format validated"
          echo ""
          echo "Note: Repository accessibility will be verified when the register-repos workflow runs"

      - name: Install dependencies
        run: |
          # Fix APT sources to use HTTPS instead of HTTP (port 80 blocked)
          sudo sed -i 's|http://archive.ubuntu.com|https://archive.ubuntu.com|g' /etc/apt/sources.list
          sudo sed -i 's|http://security.ubuntu.com|https://security.ubuntu.com|g' /etc/apt/sources.list

          # Disable PPA repositories (have invalid HTTPS certificates)
          sudo mv /etc/apt/sources.list.d /etc/apt/sources.list.d.bak 2>/dev/null || true
          sudo mkdir -p /etc/apt/sources.list.d

          sudo apt-get update -qq
          sudo apt-get install -y -qq jq

      - name: Update repositories.json
        id: update_json
        run: |
          set -euo pipefail

          CONFIG_FILE="config/repositories.json"

          echo "📝 Updating $CONFIG_FILE..."

          # Read current config
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "❌ Config file not found: $CONFIG_FILE"
            exit 1
          fi

          # Extract repository name from URL for display
          REPO_NAME=$(echo "${{ inputs.repo_url }}" | sed 's|https://github.com/The1Studio/||')

          # Build new repository entry using jq (safe from injection)
          # Only url and status - packages are auto-discovered!
          NEW_REPO=$(jq -n \
            --arg url "${{ inputs.repo_url }}" \
            --arg status "pending" \
            '{
              url: $url,
              status: $status
            }')

          # Check if repository already exists
          REPO_EXISTS=$(jq --arg url "${{ inputs.repo_url }}" \
            '.repositories[] | select(.url == $url) | .url' \
            "$CONFIG_FILE" || echo "")

          if [ -n "$REPO_EXISTS" ]; then
            echo "⚠️  Repository already exists in config"
            echo "   URL: ${{ inputs.repo_url }}"
            echo "   Current status: $(jq -r --arg url "${{ inputs.repo_url }}" '.repositories[] | select(.url == $url) | .status' "$CONFIG_FILE")"
            echo ""
            echo "   If you need to change the status, edit repositories.json manually"
            exit 1
          fi

          # Add new repository to config
          jq --argjson new_repo "$NEW_REPO" \
            '.repositories += [$new_repo]' \
            "$CONFIG_FILE" > "$CONFIG_FILE.tmp"

          # Validate JSON syntax
          if ! jq empty "$CONFIG_FILE.tmp" 2>/dev/null; then
            echo "❌ Generated invalid JSON"
            cat "$CONFIG_FILE.tmp"
            exit 1
          fi

          # Replace original file
          mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"

          echo "✅ Successfully added repository to config"
          echo ""
          echo "Repository details:"
          echo "  URL: ${{ inputs.repo_url }}"
          echo "  Status: pending"
          echo ""
          echo "📦 Packages will be auto-discovered by the workflow!"

          # Set output for PR body
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT

      - name: Commit and push to master
        id: commit_push
        run: |
          set -euo pipefail

          # Extract repo name from URL
          REPO_NAME=$(echo "${{ inputs.repo_url }}" | sed 's|https://github.com/The1Studio/||')

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Stage and commit changes
          git add config/repositories.json

          COMMIT_MSG=$(cat <<EOF
          Register ${REPO_NAME} for UPM auto-publishing

          Repository: ${{ inputs.repo_url }}
          Status: pending (workflow will deploy automatically)

          Packages will be auto-discovered by the workflow.

          Requested by: @${{ github.actor }}

          🤖 Generated with [Claude Code](https://claude.com/claude-code)

          Co-Authored-By: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          EOF
          )

          git commit -m "$COMMIT_MSG"

          # Push directly to master
          git push origin master

          echo "✅ Repository registered and pushed to master"
          echo "✅ This will trigger the register-repos workflow automatically"

          # Get commit SHA for reference
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "# 🎉 Repository Registered!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Repository **${{ steps.update_json.outputs.repo_name }}** has been registered automatically!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ What Just Happened" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Repository added to registry" >> $GITHUB_STEP_SUMMARY
          echo "2. ✅ Changes committed to master" >> $GITHUB_STEP_SUMMARY
          echo "3. ✅ This triggers the \`register-repos\` workflow automatically" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 What Happens Next (Automatic)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. **Wait 1-2 minutes** - \`register-repos\` workflow runs" >> $GITHUB_STEP_SUMMARY
          echo "2. **PR created automatically** - Workflow file added to target repo" >> $GITHUB_STEP_SUMMARY
          echo "3. **Merge the PR** - Review and merge in target repository" >> $GITHUB_STEP_SUMMARY
          echo "4. **Update status** - Change status to \`active\` in repositories.json" >> $GITHUB_STEP_SUMMARY
          echo "5. **Test it** - Bump package version to test publishing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Repository Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** ${{ inputs.repo_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** pending (triggers deployment)" >> $GITHUB_STEP_SUMMARY
          echo "- **Packages:** Auto-discovered by workflow 📦" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ steps.commit_push.outputs.commit_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📖 [Form Registration Guide](docs/form-registration.md) | [Quick Registration Guide](docs/quick-registration.md)" >> $GITHUB_STEP_SUMMARY
