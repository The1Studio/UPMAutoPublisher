name: Daily Repository Audit

on:
  schedule:
    - cron: '0 9 * * *'  # Daily at 9 AM UTC

  workflow_dispatch:  # Manual trigger

permissions:
  contents: read

jobs:
  audit:
    runs-on: [self-hosted, arc, the1studio, org]
    timeout-minutes: 15
    name: Comprehensive repository health check
    outputs:
      total_repos: ${{ steps.stats.outputs.total_repos }}
      active: ${{ steps.stats.outputs.active }}
      pending: ${{ steps.stats.outputs.pending }}
      disabled: ${{ steps.stats.outputs.disabled }}
      total_pkgs: ${{ steps.stats.outputs.total_pkgs }}
      uptodate: ${{ steps.stats.outputs.uptodate }}
      stale: ${{ steps.stats.outputs.stale }}
      new: ${{ steps.stats.outputs.new }}
      cache_exists: ${{ steps.stats.outputs.cache_exists }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install dependencies
        run: |
          # Fix APT sources to use HTTPS instead of HTTP (port 80 blocked)
          sudo sed -i 's|http://archive.ubuntu.com|https://archive.ubuntu.com|g' /etc/apt/sources.list
          sudo sed -i 's|http://security.ubuntu.com|https://security.ubuntu.com|g' /etc/apt/sources.list

          # Disable PPA repositories
          sudo mv /etc/apt/sources.list.d /etc/apt/sources.list.d.bak 2>/dev/null || true
          sudo mkdir -p /etc/apt/sources.list.d

          sudo apt-get update
          sudo apt-get install -y jq

          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Run comprehensive audit
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          ./scripts/audit-repos.sh

      - name: Create audit report
        if: always()
        run: |
          echo "# 🔍 Daily Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date -u +%Y-%m-%d\ %H:%M:%S)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Repository status
          total=$(jq '.repositories | length' config/repositories.json)
          active=$(jq '[.repositories[] | select(.status == "active")] | length' config/repositories.json)
          pending=$(jq '[.repositories[] | select(.status == "pending")] | length' config/repositories.json)
          disabled=$(jq '[.repositories[] | select(.status == "disabled")] | length' config/repositories.json)

          echo "## 📊 Repository Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Total**: $total" >> $GITHUB_STEP_SUMMARY
          echo "- **Active**: $active" >> $GITHUB_STEP_SUMMARY
          echo "- **Pending**: $pending" >> $GITHUB_STEP_SUMMARY
          echo "- **Disabled**: $disabled" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Package status (if cache exists)
          if [ -f config/package-cache.json ]; then
            echo "## 📦 Package Status" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            total_pkgs=$(jq '[.repositories | to_entries[] | .value.packages | to_entries[]] | length' config/package-cache.json)
            uptodate=$(jq '[.repositories | to_entries[] | .value.packages | to_entries[] | select(.value.version == .value.publishedVersion)] | length' config/package-cache.json)
            stale=$(jq '[.repositories | to_entries[] | .value.packages | to_entries[] | select(.value.version != .value.publishedVersion and .value.publishedVersion != null)] | length' config/package-cache.json)
            new=$(jq '[.repositories | to_entries[] | .value.packages | to_entries[] | select(.value.publishedVersion == null)] | length' config/package-cache.json)

            echo "- **Total packages**: $total_pkgs" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Up-to-date**: $uptodate" >> $GITHUB_STEP_SUMMARY
            echo "- ⚠️ **Needs publish**: $stale" >> $GITHUB_STEP_SUMMARY
            echo "- 🆕 **Not published**: $new" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            cache_age=$(( ($(date +%s) - $(date -d "$(jq -r '.updated' config/package-cache.json)" +%s 2>/dev/null || echo 0)) / 3600 ))
            echo "📅 Cache age: $cache_age hours" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Package cache not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Collect statistics
        id: stats
        if: always()
        run: |
          # Repository counts
          total=$(jq '.repositories | length' config/repositories.json)
          active=$(jq '[.repositories[] | select(.status == "active")] | length' config/repositories.json)
          pending=$(jq '[.repositories[] | select(.status == "pending")] | length' config/repositories.json)
          disabled=$(jq '[.repositories[] | select(.status == "disabled")] | length' config/repositories.json)

          echo "total_repos=$total" >> $GITHUB_OUTPUT
          echo "active=$active" >> $GITHUB_OUTPUT
          echo "pending=$pending" >> $GITHUB_OUTPUT
          echo "disabled=$disabled" >> $GITHUB_OUTPUT

          # Package stats (if cache exists)
          if [ -f config/package-cache.json ]; then
            total_pkgs=$(jq '[.repositories | to_entries[] | .value.packages | to_entries[]] | length' config/package-cache.json)
            uptodate=$(jq '[.repositories | to_entries[] | .value.packages | to_entries[] | select(.value.version == .value.publishedVersion)] | length' config/package-cache.json)
            stale=$(jq '[.repositories | to_entries[] | .value.packages | to_entries[] | select(.value.version != .value.publishedVersion and .value.publishedVersion != null)] | length' config/package-cache.json)
            new=$(jq '[.repositories | to_entries[] | .value.packages | to_entries[] | select(.value.publishedVersion == null)] | length' config/package-cache.json)

            echo "total_pkgs=$total_pkgs" >> $GITHUB_OUTPUT
            echo "uptodate=$uptodate" >> $GITHUB_OUTPUT
            echo "stale=$stale" >> $GITHUB_OUTPUT
            echo "new=$new" >> $GITHUB_OUTPUT
            echo "cache_exists=true" >> $GITHUB_OUTPUT
          else
            echo "total_pkgs=0" >> $GITHUB_OUTPUT
            echo "uptodate=0" >> $GITHUB_OUTPUT
            echo "stale=0" >> $GITHUB_OUTPUT
            echo "new=0" >> $GITHUB_OUTPUT
            echo "cache_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Trigger publishing workflows if needed
        if: steps.stats.outputs.cache_exists == 'true' && (steps.stats.outputs.new > 0 || steps.stats.outputs.stale > 0)
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "🚀 Auto-triggering publishing workflows based on audit findings"
          echo ""

          # Trigger batch publish for unpublished packages
          if [ "${{ steps.stats.outputs.new }}" -gt 0 ]; then
            echo "📦 Found ${{ steps.stats.outputs.new }} unpublished packages"
            echo "   Triggering publish-unpublished.yml workflow..."
            if gh workflow run publish-unpublished.yml --repo The1Studio/UPMAutoPublisher; then
              echo "   ✅ Batch publish workflow triggered successfully"
            else
              echo "   ⚠️  Failed to trigger batch publish workflow"
            fi
            echo ""
          fi

          # Trigger stale publish for outdated packages
          if [ "${{ steps.stats.outputs.stale }}" -gt 0 ]; then
            echo "⚠️  Found ${{ steps.stats.outputs.stale }} stale packages"
            echo "   Triggering trigger-stale-publishes.yml workflow..."
            if gh workflow run trigger-stale-publishes.yml --repo The1Studio/UPMAutoPublisher; then
              echo "   ✅ Stale publish workflow triggered successfully"
            else
              echo "   ⚠️  Failed to trigger stale publish workflow"
            fi
            echo ""
          fi

          echo "✅ Workflow triggering completed"

      - name: Check for failures
        run: |
          # Audit script exits with 1 if mismatches found
          # This step will show failure status in workflow
          exit 0  # But don't fail the workflow

  notify-discord:
    runs-on: [self-hosted, arc, the1studio, org]
    needs: audit
    if: always()
    steps:
      - name: Send Discord notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ needs.audit.result }}
          title: "🔍 Daily Repository Audit"
          description: |
            **Workflow:** Daily Audit
            **Trigger:** ${{ github.event_name }}
            **Schedule:** Daily at 9 AM UTC

            **📊 Repository Status:**
            • Total: `${{ needs.audit.outputs.total_repos || '0' }}`
            • ✅ Active: `${{ needs.audit.outputs.active || '0' }}`
            • ⏸️ Pending: `${{ needs.audit.outputs.pending || '0' }}`
            • 🚫 Disabled: `${{ needs.audit.outputs.disabled || '0' }}`

            **📦 Package Status:**
            ${{ needs.audit.outputs.cache_exists == 'true' && format('• Total: `{0}`
            • ✅ Up-to-date: `{1}`
            • ⚠️ Needs Publish: `{2}`
            • 🆕 Not Published: `{3}`', needs.audit.outputs.total_pkgs, needs.audit.outputs.uptodate, needs.audit.outputs.stale, needs.audit.outputs.new) || '• ⚠️ Cache not found' }}

            **🔗 Links:**
            • [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            • [Repository Registry](${{ github.server_url }}/${{ github.repository }}/blob/master/config/repositories.json)
          color: ${{ needs.audit.result == 'success' && '0x48C21B' || needs.audit.result == 'failure' && '0xFF0000' || '0xFFCC00' }}
          username: "THE 1 GAME STUDIO"
          avatar_url: "https://raw.githubusercontent.com/The1Studio/UPMAutoPublisher/master/.github/assets/the1studio-logo.png"
