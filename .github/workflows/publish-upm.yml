name: Publish to UPM Registry

on:
  push:
    branches:
      - master
      - main
    paths:
      - '**/package.json'

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # FIX: Add job-level timeout
    name: Auto-publish UPM packages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit for diff

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://upm.the1studio.org/'

      - name: Detect and publish changed packages
        timeout-minutes: 15  # FIX: Add step-level timeout
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # FIX: Use proper error handling instead of set +e
          set -euo pipefail

          echo "========================================="
          echo "üîç Detecting changed package.json files"
          echo "========================================="

          # Get list of changed package.json files
          changed_files=$(git diff --name-only HEAD~1 HEAD | grep 'package\.json$' || true)

          if [ -z "$changed_files" ]; then
            echo "‚ÑπÔ∏è  No package.json files changed in this commit"
            exit 0
          fi

          echo "üì¶ Found changed package.json files:"
          echo "$changed_files"
          echo ""

          # Track results
          published=0
          skipped=0
          failed=0
          failed_packages=""

          # Process each changed package.json
          while IFS= read -r package_json; do
            echo "========================================="
            echo "üìã Processing: ${package_json}"
            echo "========================================="

            # Check if file still exists (not deleted)
            if [ ! -f "$package_json" ]; then
              echo "‚ö†Ô∏è  File was deleted, skipping"
              ((skipped++))
              continue
            fi

            # Extract package directory
            package_dir=$(dirname "$package_json")

            # Extract package info using jq
            if ! command -v jq &> /dev/null; then
              echo "‚ùå jq is not installed, installing..."
              sudo apt-get update && sudo apt-get install -y jq
            fi

            # FIX: Use explicit error handling for jq
            if ! package_name=$(jq -r '.name // empty' "$package_json" 2>/dev/null); then
              echo "‚ùå Failed to parse package.json, skipping"
              ((skipped++))
              continue
            fi

            if ! new_version=$(jq -r '.version // empty' "$package_json" 2>/dev/null); then
              echo "‚ùå Failed to parse package.json version, skipping"
              ((skipped++))
              continue
            fi

            registry=$(jq -r '.publishConfig.registry // empty' "$package_json" 2>/dev/null || echo "")

            # Validate package info
            if [ -z "$package_name" ] || [ -z "$new_version" ]; then
              echo "‚ö†Ô∏è  Missing name or version in package.json, skipping"
              ((skipped++))
              continue
            fi

            # FIX: Validate package name format (must start with com.theone.)
            if [[ ! "$package_name" =~ ^com\.theone\. ]]; then
              echo "‚ùå Invalid package name: $package_name"
              echo "   Package names must start with 'com.theone.'"
              ((skipped++))
              continue
            fi

            # FIX: Validate semver format (MAJOR.MINOR.PATCH with optional prerelease/build)
            if [[ ! "$new_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?(\+[a-zA-Z0-9.]+)?$ ]]; then
              echo "‚ùå Invalid version format: $new_version"
              echo "   Version must follow semantic versioning (e.g., 1.0.0, 1.0.0-beta.1)"
              ((skipped++))
              continue
            fi

            # FIX: Check for dangerous characters in package name or version
            if [[ "$package_name" =~ [^a-zA-Z0-9._-] ]]; then
              echo "‚ùå Package name contains invalid characters: $package_name"
              ((skipped++))
              continue
            fi

            if [[ "$new_version" =~ [^a-zA-Z0-9.+-] ]]; then
              echo "‚ùå Version contains invalid characters: $new_version"
              ((skipped++))
              continue
            fi

            echo "üì¶ Package: ${package_name}"
            echo "üè∑Ô∏è  Version: ${new_version}"
            echo "üìç Directory: ${package_dir}"

            # Check if this is a UPM package (has our registry configured)
            if [ -z "$registry" ] || [ "$registry" != "https://upm.the1studio.org/" ]; then
              echo "‚ö†Ô∏è  Not configured for upm.the1studio.org, skipping"
              ((skipped++))
              continue
            fi

            # Check if version already exists on registry
            echo "üîç Checking if version exists on registry..."
            # FIX: Use explicit error handling for version check
            if npm view "${package_name}@${new_version}" --registry https://upm.the1studio.org/ >/dev/null 2>&1; then
              echo "‚è≠Ô∏è  Version ${new_version} already exists for ${package_name}, skipping"
              ((skipped++))
              continue
            fi

            # Publish package
            echo "üöÄ Publishing ${package_name}@${new_version}..."

            # FIX: Validate directory exists before cd
            if [ ! -d "$package_dir" ]; then
              echo "‚ùå Directory does not exist: $package_dir"
              ((skipped++))
              continue
            fi

            # FIX: Safe directory change with error handling
            if ! cd "$package_dir"; then
              echo "‚ùå Failed to change directory to $package_dir"
              ((skipped++))
              continue
            fi

            # FIX: Explicit error handling for npm publish with trap-based cleanup
            publish_output=$(mktemp)
            trap "rm -f '$publish_output'" EXIT ERR INT TERM

            if npm publish --registry https://upm.the1studio.org/ >"$publish_output" 2>&1; then
              echo "‚úÖ Successfully published ${package_name}@${new_version}"
              cat "$publish_output"
              ((published++))
            else
              echo "‚ùå Failed to publish ${package_name}@${new_version}"
              echo "Error output:"
              cat "$publish_output"
              ((failed++))
              failed_packages="${failed_packages}${package_name}@${new_version} "
            fi

            # Cleanup happens automatically via trap, but also clean up here for immediate removal
            rm -f "$publish_output"
            trap - EXIT ERR INT TERM

            # Return to root directory
            cd "$GITHUB_WORKSPACE"
            echo ""

          done <<< "$changed_files"

          # Summary
          echo "========================================="
          echo "üìä Publishing Summary"
          echo "========================================="
          echo "‚úÖ Published: ${published}"
          echo "‚è≠Ô∏è  Skipped: ${skipped}"
          echo "‚ùå Failed: ${failed}"
          echo "========================================="

          # Exit with error if any publishes failed
          if [ "$failed" -gt 0 ]; then
            echo "‚ö†Ô∏è  Some packages failed to publish:"
            echo "   ${failed_packages}"
            exit 1
          fi

          if [ "$published" -eq 0 ]; then
            echo "‚ÑπÔ∏è  No new versions to publish"
          fi

      # FIX: Correct job.status comparison syntax
      - name: Summary
        if: always()
        run: |
          if [ "${{ job.status }}" == 'success' ]; then
            echo "‚úÖ Workflow completed successfully"
          else
            echo "‚ö†Ô∏è  Workflow completed with errors - check logs above"
          fi
