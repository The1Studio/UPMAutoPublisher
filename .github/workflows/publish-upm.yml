name: Publish to UPM Registry

on:
  push:
    branches:
      - master
      - main
    paths:
      - '**/package.json'

# FIX ME-6: Explicit permissions for security and clarity
permissions:
  contents: read      # Read repository contents
  actions: write      # Write workflow artifacts (audit logs)

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # FIX: Add job-level timeout
    name: Auto-publish UPM packages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit for diff

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://upm.the1studio.org/'

      # FIX: Add registry health check before attempting publish
      - name: Health check registry
        env:
          UPM_REGISTRY: ${{ vars.UPM_REGISTRY || 'https://upm.the1studio.org/' }}
        run: |
          echo "üè• Checking registry health..."
          echo "Registry: $UPM_REGISTRY"

          # Extract registry host for ping test
          registry_host=$(echo "$UPM_REGISTRY" | sed -E 's|https?://([^/]+).*|\1|')
          echo "Host: $registry_host"

          # Try to access registry root
          if curl -f -s -m 10 "$UPM_REGISTRY" >/dev/null 2>&1; then
            echo "‚úÖ Registry is accessible"
          elif curl -f -s -m 10 "${UPM_REGISTRY}-/ping" >/dev/null 2>&1; then
            echo "‚úÖ Registry ping endpoint is accessible"
          else
            echo "‚ùå Registry is not accessible"
            echo "   URL: $UPM_REGISTRY"
            echo "   This may cause publish failures"
            echo ""
            echo "Troubleshooting:"
            echo "  1. Check if registry is running"
            echo "  2. Verify URL is correct"
            echo "  3. Check network connectivity"
            echo "  4. Verify firewall rules"
            exit 1
          fi

      - name: Detect and publish changed packages
        timeout-minutes: 15  # FIX: Add step-level timeout
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          # FIX: Make registry URL configurable via organization variable
          UPM_REGISTRY: ${{ vars.UPM_REGISTRY || 'https://upm.the1studio.org/' }}
        run: |
          # FIX: Use proper error handling instead of set +e
          set -euo pipefail

          # Define emoji constants
          CROSS="‚ùå"
          CHECK="‚úÖ"

          # FIX M-5: Validate registry URL format
          if [[ ! "$UPM_REGISTRY" =~ ^https://[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/?$ ]]; then
            echo "‚ùå Invalid registry URL: $UPM_REGISTRY"
            echo "   Registry must be HTTPS with valid domain"
            exit 1
          fi

          # Ensure it's not a well-known public registry
          if [[ "$UPM_REGISTRY" =~ (npmjs\.org|registry\.npmjs\.com) ]]; then
            echo "‚ùå Cannot publish to public npm registry"
            echo "   This appears to be the public npm registry"
            exit 1
          fi

          echo "========================================="
          echo "üéØ Target Registry: $UPM_REGISTRY"
          echo "========================================="

          echo "========================================="
          echo "üîç Detecting changed package.json files"
          echo "========================================="

          # Get list of changed package.json files
          changed_files=$(git diff --name-only HEAD~1 HEAD | grep 'package\.json$' || true)

          if [ -z "$changed_files" ]; then
            echo "‚ÑπÔ∏è  No package.json files changed in this commit"
            exit 0
          fi

          echo "üì¶ Found changed package.json files:"
          echo "$changed_files"
          echo ""

          # FIX H-3: Set up consistent trap cleanup for all temp files
          # Maintain array of files to clean up
          cleanup_files=()
          trap 'rm -f "${cleanup_files[@]}"' EXIT ERR INT TERM

          # Track results
          published=0
          skipped=0
          failed=0
          failed_packages=""

          # Process each changed package.json
          while IFS= read -r package_json; do
            echo "========================================="
            echo "üìã Processing: ${package_json}"
            echo "========================================="

            # Check if file still exists (not deleted)
            if [ ! -f "$package_json" ]; then
              echo "‚ö†Ô∏è  File was deleted, skipping"
              ((skipped++))
              continue
            fi

            # Extract package directory
            package_dir=$(dirname "$package_json")

            # Extract package info using jq
            if ! command -v jq &> /dev/null; then
              echo "‚ùå jq is not installed, installing..."
              sudo apt-get update && sudo apt-get install -y jq
            fi

            # FIX: Use explicit error handling for jq
            if ! package_name=$(jq -r '.name // empty' "$package_json" 2>/dev/null); then
              echo "‚ùå Failed to parse package.json, skipping"
              ((skipped++))
              continue
            fi

            if ! new_version=$(jq -r '.version // empty' "$package_json" 2>/dev/null); then
              echo "‚ùå Failed to parse package.json version, skipping"
              ((skipped++))
              continue
            fi

            registry=$(jq -r '.publishConfig.registry // empty' "$package_json" 2>/dev/null || echo "")

            # Validate package info
            if [ -z "$package_name" ] || [ -z "$new_version" ]; then
              echo "‚ö†Ô∏è  Missing name or version in package.json, skipping"
              ((skipped++))
              continue
            fi

            # FIX: Validate package name format (must start with com.theone.)
            if [[ ! "$package_name" =~ ^com\.theone\. ]]; then
              echo "‚ùå Invalid package name: $package_name"
              echo "   Package names must start with 'com.theone.'"
              ((skipped++))
              continue
            fi

            # FIX: Validate semver format (MAJOR.MINOR.PATCH with optional prerelease/build)
            if [[ ! "$new_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?(\+[a-zA-Z0-9.]+)?$ ]]; then
              echo "‚ùå Invalid version format: $new_version"
              echo "   Version must follow semantic versioning (e.g., 1.0.0, 1.0.0-beta.1)"
              ((skipped++))
              continue
            fi

            # FIX: Check for dangerous characters in package name or version
            if [[ "$package_name" =~ [^a-zA-Z0-9._-] ]]; then
              echo "‚ùå Package name contains invalid characters: $package_name"
              ((skipped++))
              continue
            fi

            if [[ "$new_version" =~ [^a-zA-Z0-9.+-] ]]; then
              echo "‚ùå Version contains invalid characters: $new_version"
              ((skipped++))
              continue
            fi

            echo "üì¶ Package: ${package_name}"
            echo "üè∑Ô∏è  Version: ${new_version}"
            echo "üìç Directory: ${package_dir}"

            # FIX M-4: Verify package name matches directory structure (warning only)
            expected_suffix=$(basename "$package_dir" | tr '[:upper:]' '[:lower:]' | tr -d ' ')
            package_suffix=$(echo "$package_name" | sed 's/^com\.theone\.//' | tr '[:upper:]' '[:lower:]')

            if [[ "$package_suffix" != *"$expected_suffix"* ]] && [[ "$expected_suffix" != *"$package_suffix"* ]]; then
              echo "‚ö†Ô∏è  Warning: Package name '$package_name' doesn't match directory '$package_dir'"
              echo "   This might indicate a configuration error"
              echo "   Expected package name to contain: $expected_suffix"
              echo "   Actual package suffix: $package_suffix"
              echo "   Continuing with publish..."
            fi

            # Check if this is a UPM package (has our registry configured)
            if [ -z "$registry" ] || [ "$registry" != "$UPM_REGISTRY" ]; then
              echo "‚ö†Ô∏è  Not configured for $UPM_REGISTRY, skipping"
              ((skipped++))
              continue
            fi

            # Check if version already exists on registry
            echo "üîç Checking if version exists on registry..."
            # FIX: Use explicit error handling for version check
            if npm view "${package_name}@${new_version}" --registry "$UPM_REGISTRY" >/dev/null 2>&1; then
              echo "‚è≠Ô∏è  Version ${new_version} already exists for ${package_name}, skipping"
              ((skipped++))
              continue
            fi

            # FIX M-2: Use npm/npx semver for accurate version comparison (especially pre-releases)
            echo "üîç Checking version ordering..."
            latest_version=$(npm view "$package_name" version --registry "$UPM_REGISTRY" 2>/dev/null || echo "0.0.0")

            if [ "$latest_version" != "0.0.0" ]; then
              echo "   Latest published: $latest_version"
              echo "   New version: $new_version"

              # Try using npx semver for accurate comparison (handles pre-releases correctly)
              if command -v npx &>/dev/null && npx -q semver --version &>/dev/null; then
                echo "   Using semver for accurate version comparison"
                if npx -q semver "$new_version" -r ">$latest_version" &>/dev/null; then
                  echo "‚úÖ Version check passed: $new_version > $latest_version (semver)"
                else
                  echo "‚ö†Ô∏è  Warning: New version ($new_version) is not newer than latest ($latest_version)"
                  echo "   This appears to be a version rollback or mistake."
                  echo "   Skipping for safety - if intentional, publish manually with:"
                  echo "   npm publish --registry $UPM_REGISTRY"
                  ((skipped++))
                  continue
                fi
              else
                # Fallback to sort -V with warning
                echo "   ‚ö†Ô∏è  Using basic version sort (semver not available for pre-release accuracy)"
                newer=$(printf '%s\n' "$new_version" "$latest_version" | sort -V | tail -n1)

                if [ "$newer" != "$new_version" ]; then
                  echo "‚ö†Ô∏è  Warning: New version ($new_version) is not newer than latest ($latest_version)"
                  echo "   This appears to be a version rollback or mistake."
                  echo "   Skipping for safety - if intentional, publish manually with:"
                  echo "   npm publish --registry $UPM_REGISTRY"
                  ((skipped++))
                  continue
                else
                  echo "‚úÖ Version check passed: $new_version > $latest_version (basic sort)"
                fi
              fi
            else
              echo "‚ÑπÔ∏è  First publication of this package"
            fi

            # Publish package
            echo "üöÄ Publishing ${package_name}@${new_version}..."

            # FIX ME-2: Check npm registry connectivity before publishing
            if ! npm ping --registry "$UPM_REGISTRY" &>/dev/null; then
              echo "‚ö†Ô∏è  Registry not responding, may be rate limited or down"
              echo "   Waiting 5 seconds before retry..."
              sleep 5
              if ! npm ping --registry "$UPM_REGISTRY" &>/dev/null; then
                echo "‚ùå Registry still not responding after retry"
                ((failed++))
                failed_packages="${failed_packages}${package_name}@${new_version} "
                continue
              fi
            fi

            # FIX: Validate directory exists before cd
            if [ ! -d "$package_dir" ]; then
              echo "‚ùå Directory does not exist: $package_dir"
              ((skipped++))
              continue
            fi

            # FIX: Check package size and warn if unusually large
            echo "üìè Checking package size..."
            package_size=$(du -sb "$package_dir" 2>/dev/null | cut -f1 || echo "0")
            package_size_mb=$((package_size / 1024 / 1024))

            if [ "$package_size" -gt 0 ]; then
              echo "   Package size: ${package_size_mb}MB"

              # Warn if package is larger than 50MB
              if [ "$package_size" -gt $((50 * 1024 * 1024)) ]; then
                echo "‚ö†Ô∏è  Warning: Package size is unusually large (${package_size_mb}MB)"
                echo "   This might indicate accidentally included files."
                echo ""
                echo "   Largest files in package:"
                find "$package_dir" -type f -exec ls -lh {} \; 2>/dev/null | sort -k5 -hr | head -10 | awk '{print "     " $9 " (" $5 ")"}'
                echo ""
                echo "   Common causes:"
                echo "   - node_modules/ not excluded"
                echo "   - Build artifacts included"
                echo "   - Large binary files"
                echo "   - Test files not excluded"
                echo ""
                echo "   Continuing with publish, but please review..."
              fi
            fi

            # FIX: Safe directory change with error handling
            if ! cd "$package_dir"; then
              echo "‚ùå Failed to change directory to $package_dir"
              ((skipped++))
              continue
            fi

            # FIX: Explicit error handling for npm publish with trap-based cleanup
            publish_output=$(mktemp)
            cleanup_files+=("$publish_output")

            # FIX ME-5: Retry npm publish up to 3 times for transient failures
            max_attempts=3
            attempt=1
            publish_success=false

            while [ $attempt -le $max_attempts ]; do
              if npm publish --registry "$UPM_REGISTRY" >"$publish_output" 2>&1; then
                publish_success=true
                break
              fi

              if [ $attempt -lt $max_attempts ]; then
                echo "‚ö†Ô∏è  Publish attempt $attempt failed, retrying in $((attempt * 5)) seconds..."
                sleep $((attempt * 5))
                ((attempt++))
              else
                echo "‚ùå Failed after $max_attempts attempts"
                break
              fi
            done

            if [ "$publish_success" = true ]; then
              echo "‚úÖ Successfully published ${package_name}@${new_version}"
              cat "$publish_output"

              # FIX: Verify package was published correctly
              echo "üîç Verifying publication..."
              sleep 3  # Wait for registry to index

              published_version=$(npm view "${package_name}@${new_version}" version --registry "$UPM_REGISTRY" 2>/dev/null || echo "")

              if [ "$published_version" = "$new_version" ]; then
                echo "‚úÖ Verified: ${package_name}@${new_version} is available on registry"
                ((published++))
              else
                echo "‚ùå Verification failed: Package not found on registry"
                echo "   Expected: $new_version"
                echo "   Got: ${published_version:-'not found'}"
                echo "‚ö†Ô∏è  Package may have been published but not yet indexed"
                ((failed++))
                failed_packages="${failed_packages}${package_name}@${new_version} "
              fi
            else
              echo "‚ùå Failed to publish ${package_name}@${new_version}"
              echo ""
              echo "Error output:"
              cat "$publish_output"
              echo ""

              # FIX: Add comprehensive debug information
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "Debug Information:"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "  Package: $package_name"
              echo "  Version: $new_version"
              echo "  Directory: $package_dir"
              echo "  Registry: $(jq -r '.publishConfig.registry // "not set"' "$package_json")"
              echo ""

              # Check common issues
              echo "Common Issue Checks:"

              if ! jq -e '.publishConfig.registry' "$package_json" >/dev/null 2>&1; then
                echo "  ${CROSS} Missing publishConfig.registry in package.json"
              else
                echo "  ‚úì publishConfig.registry is set"
              fi

              if [ ! -f "$package_dir/package.json" ]; then
                echo "  ${CROSS} package.json not found in package directory"
              else
                echo "  ‚úì package.json exists"
              fi

              if [ ! -r "$package_dir/package.json" ]; then
                echo "  ${CROSS} package.json is not readable"
              else
                echo "  ‚úì package.json is readable"
              fi

              echo ""
              echo "Files in package directory (top 20):"
              ls -la "$package_dir" 2>/dev/null | head -20 || echo "  (failed to list files)"

              echo ""
              echo "Package.json contents:"
              jq '.' "$package_json" 2>/dev/null || cat "$package_json" || echo "  (failed to read package.json)"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo ""

              ((failed++))
              failed_packages="${failed_packages}${package_name}@${new_version} "
            fi

            # Cleanup handled by global trap at script exit
            # FIX H-2: Validate GITHUB_WORKSPACE before using it
            # Return to root directory
            if [ -z "$GITHUB_WORKSPACE" ] || [ ! -d "$GITHUB_WORKSPACE" ]; then
              echo "‚ùå GITHUB_WORKSPACE not set or invalid"
              exit 1
            fi
            cd "$GITHUB_WORKSPACE"
            echo ""

          done <<< "$changed_files"

          # Summary
          echo "========================================="
          echo "üìä Publishing Summary"
          echo "========================================="
          echo "‚úÖ Published: ${published}"
          echo "‚è≠Ô∏è  Skipped: ${skipped}"
          echo "‚ùå Failed: ${failed}"
          echo "========================================="

          # Exit with error if any publishes failed
          if [ "$failed" -gt 0 ]; then
            echo "‚ö†Ô∏è  Some packages failed to publish:"
            echo "   ${failed_packages}"
            exit 1
          fi

          if [ "$published" -eq 0 ]; then
            echo "‚ÑπÔ∏è  No new versions to publish"
          fi

          # Export variables for audit log
          echo "published=$published" >> $GITHUB_ENV
          echo "failed=$failed" >> $GITHUB_ENV
          echo "skipped=$skipped" >> $GITHUB_ENV
          echo "failed_packages=$failed_packages" >> $GITHUB_ENV

      # FIX: Add audit logging for compliance and debugging
      - name: Record audit log
        if: always()
        run: |
          # FIX H-1: Sanitize commit message to prevent command injection
          # Use jq to properly escape and truncate commit message
          commit_msg=$(git log -1 --pretty=%s | head -c 100 | jq -Rs .)

          # Create audit log entry with proper JSON escaping
          cat > audit-log.json <<EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_run_id": "${{ github.run_id }}",
            "workflow_run_number": "${{ github.run_number }}",
            "repository": "${{ github.repository }}",
            "commit_sha": "${{ github.sha }}",
            "commit_message": ${commit_msg},
            "actor": "${{ github.actor }}",
            "event": "${{ github.event_name }}",
            "ref": "${{ github.ref }}",
            "published": ${{ env.published || 0 }},
            "failed": ${{ env.failed || 0 }},
            "skipped": ${{ env.skipped || 0 }},
            "registry": "${{ vars.UPM_REGISTRY || 'https://upm.the1studio.org/' }}",
            "failed_packages": "${{ env.failed_packages || 'none' }}",
            "job_status": "${{ job.status }}"
          }
          EOF

          echo "üìù Audit log created:"
          cat audit-log.json

      - name: Upload audit log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit-log-${{ github.run_id }}
          path: audit-log.json
          retention-days: 90

      # FIX: Correct job.status comparison syntax
      - name: Summary
        if: always()
        run: |
          if [ "${{ job.status }}" == 'success' ]; then
            echo "‚úÖ Workflow completed successfully"
          else
            echo "‚ö†Ô∏è  Workflow completed with errors - check logs above"
          fi
