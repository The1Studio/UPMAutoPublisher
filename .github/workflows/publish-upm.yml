name: Publish to UPM Registry

on:
  push:
    branches:
      - master
      - main
    paths:
      - '**/package.json'

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # FIX: Add job-level timeout
    name: Auto-publish UPM packages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit for diff

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://upm.the1studio.org/'

      - name: Detect and publish changed packages
        timeout-minutes: 15  # FIX: Add step-level timeout
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          # FIX: Make registry URL configurable via organization variable
          UPM_REGISTRY: ${{ vars.UPM_REGISTRY || 'https://upm.the1studio.org/' }}
        run: |
          # FIX: Use proper error handling instead of set +e
          set -euo pipefail

          # Define emoji constants
          CROSS="❌"
          CHECK="✅"

          echo "Registry: $UPM_REGISTRY"

          echo "========================================="
          echo "🔍 Detecting changed package.json files"
          echo "========================================="

          # Get list of changed package.json files
          changed_files=$(git diff --name-only HEAD~1 HEAD | grep 'package\.json$' || true)

          if [ -z "$changed_files" ]; then
            echo "ℹ️  No package.json files changed in this commit"
            exit 0
          fi

          echo "📦 Found changed package.json files:"
          echo "$changed_files"
          echo ""

          # Track results
          published=0
          skipped=0
          failed=0
          failed_packages=""

          # Process each changed package.json
          while IFS= read -r package_json; do
            echo "========================================="
            echo "📋 Processing: ${package_json}"
            echo "========================================="

            # Check if file still exists (not deleted)
            if [ ! -f "$package_json" ]; then
              echo "⚠️  File was deleted, skipping"
              ((skipped++))
              continue
            fi

            # Extract package directory
            package_dir=$(dirname "$package_json")

            # Extract package info using jq
            if ! command -v jq &> /dev/null; then
              echo "❌ jq is not installed, installing..."
              sudo apt-get update && sudo apt-get install -y jq
            fi

            # FIX: Use explicit error handling for jq
            if ! package_name=$(jq -r '.name // empty' "$package_json" 2>/dev/null); then
              echo "❌ Failed to parse package.json, skipping"
              ((skipped++))
              continue
            fi

            if ! new_version=$(jq -r '.version // empty' "$package_json" 2>/dev/null); then
              echo "❌ Failed to parse package.json version, skipping"
              ((skipped++))
              continue
            fi

            registry=$(jq -r '.publishConfig.registry // empty' "$package_json" 2>/dev/null || echo "")

            # Validate package info
            if [ -z "$package_name" ] || [ -z "$new_version" ]; then
              echo "⚠️  Missing name or version in package.json, skipping"
              ((skipped++))
              continue
            fi

            # FIX: Validate package name format (must start with com.theone.)
            if [[ ! "$package_name" =~ ^com\.theone\. ]]; then
              echo "❌ Invalid package name: $package_name"
              echo "   Package names must start with 'com.theone.'"
              ((skipped++))
              continue
            fi

            # FIX: Validate semver format (MAJOR.MINOR.PATCH with optional prerelease/build)
            if [[ ! "$new_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?(\+[a-zA-Z0-9.]+)?$ ]]; then
              echo "❌ Invalid version format: $new_version"
              echo "   Version must follow semantic versioning (e.g., 1.0.0, 1.0.0-beta.1)"
              ((skipped++))
              continue
            fi

            # FIX: Check for dangerous characters in package name or version
            if [[ "$package_name" =~ [^a-zA-Z0-9._-] ]]; then
              echo "❌ Package name contains invalid characters: $package_name"
              ((skipped++))
              continue
            fi

            if [[ "$new_version" =~ [^a-zA-Z0-9.+-] ]]; then
              echo "❌ Version contains invalid characters: $new_version"
              ((skipped++))
              continue
            fi

            echo "📦 Package: ${package_name}"
            echo "🏷️  Version: ${new_version}"
            echo "📍 Directory: ${package_dir}"

            # Check if this is a UPM package (has our registry configured)
            if [ -z "$registry" ] || [ "$registry" != "$UPM_REGISTRY" ]; then
              echo "⚠️  Not configured for $UPM_REGISTRY, skipping"
              ((skipped++))
              continue
            fi

            # Check if version already exists on registry
            echo "🔍 Checking if version exists on registry..."
            # FIX: Use explicit error handling for version check
            if npm view "${package_name}@${new_version}" --registry "$UPM_REGISTRY" >/dev/null 2>&1; then
              echo "⏭️  Version ${new_version} already exists for ${package_name}, skipping"
              ((skipped++))
              continue
            fi

            # Publish package
            echo "🚀 Publishing ${package_name}@${new_version}..."

            # FIX: Validate directory exists before cd
            if [ ! -d "$package_dir" ]; then
              echo "❌ Directory does not exist: $package_dir"
              ((skipped++))
              continue
            fi

            # FIX: Safe directory change with error handling
            if ! cd "$package_dir"; then
              echo "❌ Failed to change directory to $package_dir"
              ((skipped++))
              continue
            fi

            # FIX: Explicit error handling for npm publish with trap-based cleanup
            publish_output=$(mktemp)
            trap "rm -f '$publish_output'" EXIT ERR INT TERM

            if npm publish --registry "$UPM_REGISTRY" >"$publish_output" 2>&1; then
              echo "✅ Successfully published ${package_name}@${new_version}"
              cat "$publish_output"

              # FIX: Verify package was published correctly
              echo "🔍 Verifying publication..."
              sleep 3  # Wait for registry to index

              published_version=$(npm view "${package_name}@${new_version}" version --registry "$UPM_REGISTRY" 2>/dev/null || echo "")

              if [ "$published_version" = "$new_version" ]; then
                echo "✅ Verified: ${package_name}@${new_version} is available on registry"
                ((published++))
              else
                echo "❌ Verification failed: Package not found on registry"
                echo "   Expected: $new_version"
                echo "   Got: ${published_version:-'not found'}"
                echo "⚠️  Package may have been published but not yet indexed"
                ((failed++))
                failed_packages="${failed_packages}${package_name}@${new_version} "
              fi
            else
              echo "❌ Failed to publish ${package_name}@${new_version}"
              echo ""
              echo "Error output:"
              cat "$publish_output"
              echo ""

              # FIX: Add comprehensive debug information
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo "Debug Information:"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo "  Package: $package_name"
              echo "  Version: $new_version"
              echo "  Directory: $package_dir"
              echo "  Registry: $(jq -r '.publishConfig.registry // "not set"' "$package_json")"
              echo ""

              # Check common issues
              echo "Common Issue Checks:"

              if ! jq -e '.publishConfig.registry' "$package_json" >/dev/null 2>&1; then
                echo "  ${CROSS} Missing publishConfig.registry in package.json"
              else
                echo "  ✓ publishConfig.registry is set"
              fi

              if [ ! -f "$package_dir/package.json" ]; then
                echo "  ${CROSS} package.json not found in package directory"
              else
                echo "  ✓ package.json exists"
              fi

              if [ ! -r "$package_dir/package.json" ]; then
                echo "  ${CROSS} package.json is not readable"
              else
                echo "  ✓ package.json is readable"
              fi

              echo ""
              echo "Files in package directory (top 20):"
              ls -la "$package_dir" 2>/dev/null | head -20 || echo "  (failed to list files)"

              echo ""
              echo "Package.json contents:"
              jq '.' "$package_json" 2>/dev/null || cat "$package_json" || echo "  (failed to read package.json)"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo ""

              ((failed++))
              failed_packages="${failed_packages}${package_name}@${new_version} "
            fi

            # Cleanup happens automatically via trap, but also clean up here for immediate removal
            rm -f "$publish_output"
            trap - EXIT ERR INT TERM

            # Return to root directory
            cd "$GITHUB_WORKSPACE"
            echo ""

          done <<< "$changed_files"

          # Summary
          echo "========================================="
          echo "📊 Publishing Summary"
          echo "========================================="
          echo "✅ Published: ${published}"
          echo "⏭️  Skipped: ${skipped}"
          echo "❌ Failed: ${failed}"
          echo "========================================="

          # Exit with error if any publishes failed
          if [ "$failed" -gt 0 ]; then
            echo "⚠️  Some packages failed to publish:"
            echo "   ${failed_packages}"
            exit 1
          fi

          if [ "$published" -eq 0 ]; then
            echo "ℹ️  No new versions to publish"
          fi

          # Export variables for audit log
          echo "published=$published" >> $GITHUB_ENV
          echo "failed=$failed" >> $GITHUB_ENV
          echo "skipped=$skipped" >> $GITHUB_ENV
          echo "failed_packages=$failed_packages" >> $GITHUB_ENV

      # FIX: Add audit logging for compliance and debugging
      - name: Record audit log
        if: always()
        run: |
          # Create audit log entry
          cat > audit-log.json <<EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_run_id": "${{ github.run_id }}",
            "workflow_run_number": "${{ github.run_number }}",
            "repository": "${{ github.repository }}",
            "commit_sha": "${{ github.sha }}",
            "commit_message": "$(git log -1 --pretty=%B | head -1)",
            "actor": "${{ github.actor }}",
            "event": "${{ github.event_name }}",
            "ref": "${{ github.ref }}",
            "published": ${{ env.published || 0 }},
            "failed": ${{ env.failed || 0 }},
            "skipped": ${{ env.skipped || 0 }},
            "registry": "${{ vars.UPM_REGISTRY || 'https://upm.the1studio.org/' }}",
            "failed_packages": "${{ env.failed_packages || 'none' }}",
            "job_status": "${{ job.status }}"
          }
          EOF

          echo "📝 Audit log created:"
          cat audit-log.json

      - name: Upload audit log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit-log-${{ github.run_id }}
          path: audit-log.json
          retention-days: 90

      # FIX: Correct job.status comparison syntax
      - name: Summary
        if: always()
        run: |
          if [ "${{ job.status }}" == 'success' ]; then
            echo "✅ Workflow completed successfully"
          else
            echo "⚠️  Workflow completed with errors - check logs above"
          fi
