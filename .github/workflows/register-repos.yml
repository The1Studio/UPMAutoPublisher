name: Auto-Register Repositories

# Triggers when repositories.json is updated
on:
  push:
    branches:
      - master
      - main
    paths:
      - 'config/repositories.json'

# FIX ME-6: Explicit permissions for security and clarity
permissions:
  contents: write         # Push branches to target repos
  pull-requests: write    # Create PRs in target repos
  issues: write           # Comment on PRs

jobs:
  register-repos:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # FIX: Add job-level timeout
    name: Deploy UPM workflow to registered repositories
    # FIX HIGH-3: Use GitHub concurrency control instead of file-based locking
    concurrency:
      group: register-repos-${{ github.ref }}
      cancel-in-progress: false  # Wait for completion, don't cancel

    steps:
      - name: Checkout UPMAutoPublisher
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      # FIX MAJOR-6: Validate JSON schema with proper error handling
      - name: Install ajv-cli
        run: |
          if ! npm install -g ajv-cli ajv-formats; then
            echo "‚ùå Failed to install ajv-cli"
            exit 1
          fi
          echo "‚úÖ ajv-cli installed successfully"

      - name: Validate repositories.json
        run: |
          # Verify ajv is available
          if ! command -v ajv &>/dev/null; then
            echo "‚ùå ajv-cli not installed"
            exit 1
          fi

          # Validate with explicit error handling
          if ! ajv validate -s config/schema.json -d config/repositories.json --strict=false; then
            echo "‚ùå repositories.json validation failed"
            exit 1
          fi

          echo "‚úÖ repositories.json validation passed"

      - name: Process pending repositories
        timeout-minutes: 25  # FIX: Add step-level timeout
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          set -euo pipefail  # FIX: Add -u and -o pipefail for better error handling

          echo "========================================="
          echo "üîç Checking for repositories to register"
          echo "========================================="

          # Read repositories with status "pending"
          pending_repos=$(jq -r '.repositories[] | select(.status == "pending") | @json' config/repositories.json)

          if [ -z "$pending_repos" ]; then
            echo "‚ÑπÔ∏è  No pending repositories to register"
            exit 0
          fi

          echo "$pending_repos" | while IFS= read -r repo_json; do
            echo ""
            echo "========================================="
            echo "üìã Processing Repository"
            echo "========================================="

            # Extract repository URL
            repo_url=$(echo "$repo_json" | jq -r '.url')

            # FIX: Validate repository URL format and extract org/repo
            if [[ "$repo_url" =~ ^https://github\.com/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)$ ]]; then
              org="${BASH_REMATCH[1]}"
              repo="${BASH_REMATCH[2]}"
            else
              echo "‚ùå Invalid repository URL: $repo_url"
              echo "   URL must be in format: https://github.com/org/repo"
              continue
            fi

            echo "üîó URL: ${repo_url}"
            echo "üè¢ Organization: ${org}"
            echo "üìÅ Repository: ${repo}"

            # Check if repository exists
            if ! gh repo view "${org}/${repo}" >/dev/null 2>&1; then
              echo "‚ùå Repository ${org}/${repo} does not exist or not accessible"
              continue
            fi

            # FIX M-3: Acquire lock FIRST to prevent race condition
            # File-based locking to prevent concurrent workflow runs from processing same repo
            lock_file="/tmp/upm-register-${org}-${repo}.lock"
            if ! mkdir "$lock_file" 2>/dev/null; then
              echo "‚ö†Ô∏è  Another workflow is currently registering this repository, skipping"
              echo "   Lock file: $lock_file"
              continue
            fi

            # Initialize temp_dir as empty (will be set later)
            temp_dir=""
            # Add lock cleanup to trap
            trap "rm -rf '${lock_file}' '${temp_dir}'" EXIT ERR

            # THEN check for existing PRs (after acquiring lock)
            echo "üîç Checking for existing open PRs..."
            existing_pr=$(gh pr list \
              --repo "${org}/${repo}" \
              --state open \
              --head "auto-publish/add-upm-workflow" \
              --json number \
              --jq '.[0].number' 2>/dev/null || echo "")
            if [ -n "$existing_pr" ]; then
              echo "‚ö†Ô∏è  PR #${existing_pr} already exists for UPM workflow, skipping"
              rm -rf "$lock_file"
              trap - EXIT ERR
              continue
            fi

            # Check if workflow already exists
            echo "üîç Checking if workflow already exists..."
            if gh api "repos/${org}/${repo}/contents/.github/workflows/publish-upm.yml" >/dev/null 2>&1; then
              echo "‚ö†Ô∏è  Workflow already exists in ${repo}"
              echo "‚ÑπÔ∏è  Skipping deployment (manual update status to 'active' if confirmed)"
              continue
            fi

            echo "üöÄ Deploying workflow to ${org}/${repo}..."

            # Create temp directory for cloning
            temp_dir=$(mktemp -d)
            # Update trap to include temp_dir
            trap "rm -rf '${lock_file}' '${temp_dir}'" EXIT ERR

            # FIX: Validate temp directory exists before cd
            if [ ! -d "$temp_dir" ]; then
              echo "‚ùå Failed to create temp directory"
              rm -rf "$lock_file"
              trap - EXIT ERR
              continue
            fi

            # FIX: Safe directory change with error handling
            if ! cd "$temp_dir"; then
              echo "‚ùå Failed to change directory to $temp_dir"
              rm -rf "$temp_dir" "$lock_file"
              trap - EXIT ERR
              continue
            fi

            echo "üì• Cloning ${org}/${repo}..."
            if ! gh repo clone "${org}/${repo}" target-repo; then
              echo "‚ùå Failed to clone repository"
              rm -rf "$temp_dir" "$lock_file"
              trap - EXIT ERR
              continue
            fi

            # FIX: Validate cloned directory exists before cd
            if [ ! -d "target-repo" ]; then
              echo "‚ùå Cloned directory does not exist: target-repo"
              cd "$GITHUB_WORKSPACE"
              rm -rf "$temp_dir" "$lock_file"
              trap - EXIT ERR
              continue
            fi

            # FIX: Safe directory change with error handling
            if ! cd target-repo; then
              echo "‚ùå Failed to change directory to target-repo"
              cd "$GITHUB_WORKSPACE"
              rm -rf "$temp_dir" "$lock_file"
              trap - EXIT ERR
              continue
            fi

            # FIX: Detect default branch instead of assuming master
            echo "üîç Detecting default branch..."
            default_branch=$(gh repo view "${org}/${repo}" --json defaultBranchRef --jq '.defaultBranchRef.name')
            echo "üìç Default branch: ${default_branch}"

            # Create new branch with timestamp and PID for uniqueness
            branch_name="auto-publish/add-upm-workflow-$(date +%s)-$$"
            git checkout -b "$branch_name"

            # Create .github/workflows directory
            mkdir -p .github/workflows

            # FIX: Check if workflow file exists and create backup if different
            workflow_path=".github/workflows/publish-upm.yml"
            if [ -f "$workflow_path" ]; then
              echo "‚ÑπÔ∏è  Workflow file already exists"

              # Check if files are different
              if ! diff -q "$GITHUB_WORKSPACE/.github/workflows/publish-upm.yml" "$workflow_path" >/dev/null 2>&1; then
                echo "‚ö†Ô∏è  Existing workflow is different from template"

                # Create backup with timestamp
                backup_path="${workflow_path}.backup-$(date +%Y%m%d-%H%M%S)"
                cp "$workflow_path" "$backup_path"
                echo "üì¶ Created backup: $backup_path"

                # Copy new version
                echo "üìù Updating workflow file..."
                cp "$GITHUB_WORKSPACE/.github/workflows/publish-upm.yml" "$workflow_path"
              else
                echo "‚úÖ Workflow file is already up to date, skipping"
                cd "$GITHUB_WORKSPACE"
                rm -rf "$temp_dir" "$lock_file"
                trap - EXIT ERR
                continue
              fi
            else
              # New installation
              echo "üìù Creating workflow file..."
              cp "$GITHUB_WORKSPACE/.github/workflows/publish-upm.yml" "$workflow_path"
            fi

            # FIX: Properly escape commit message to prevent shell injection
            commit_date=$(date -u +%Y-%m-%d)

            # FIX L-9: Configure git with validated email
            git config user.name "UPM Auto Publisher Bot"

            # Validate email format before setting (basic RFC 5322 validation)
            bot_email="noreply@the1studio.org"
            if [[ "$bot_email" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
              git config user.email "$bot_email"
            else
              echo "‚ùå Invalid email format: $bot_email"
              cd "$GITHUB_WORKSPACE"
              rm -rf "$temp_dir" "$lock_file"
              trap - EXIT ERR
              continue
            fi

            git add .github/workflows/publish-upm.yml
            git commit -m "Add UPM auto-publishing workflow" \
                       -m "" \
                       -m "This workflow automatically publishes Unity packages to upm.the1studio.org when package.json versions are updated." \
                       -m "" \
                       -m "Setup by UPM Auto Publisher system." \
                       -m "Repository: ${org}/${repo}" \
                       -m "Date: ${commit_date}" \
                       -m "" \
                       -m "Co-Authored-By: UPM Auto Publisher <noreply@the1studio.org>"

            # Push branch (configure git to use GH_TOKEN)
            echo "‚¨ÜÔ∏è  Pushing branch ${branch_name}..."
            # Configure git to use the token for authentication
            git remote set-url origin "https://x-access-token:${GH_TOKEN}@github.com/${org}/${repo}.git"
            if ! git push origin "$branch_name"; then
              echo "‚ùå Failed to push branch"
              cd "$GITHUB_WORKSPACE"
              rm -rf "$temp_dir" "$lock_file"
              trap - EXIT ERR
              continue
            fi

            # Create pull request using here-doc for body (safer)
            echo "üéØ Creating pull request..."

            # Auto-detect packages by finding package.json files
            echo "üîç Auto-detecting UPM packages..."
            package_files=$(find . -name "package.json" -not -path "*/node_modules/*" -not -path "*/.git/*" -not -path "*/Library/*" -not -path "*/Temp/*" 2>/dev/null || echo "")

            package_list=""
            package_count=0

            if [ -n "$package_files" ]; then
              while IFS= read -r pkg_file || [ -n "$pkg_file" ]; do
                # Skip empty lines
                [ -z "$pkg_file" ] && continue

                # Extract package name and path
                pkg_name=$(jq -r '.name // empty' "$pkg_file" 2>/dev/null || echo "")
                pkg_path=$(dirname "$pkg_file" | sed 's|^\./||' || echo ".")

                if [ -n "$pkg_name" ]; then
                  package_list="${package_list}- **${pkg_name}** at \`${pkg_path}\`"$'\n'
                  package_count=$((package_count + 1))
                fi
              done <<< "$package_files"
            fi

            # Remove trailing newline (only if not empty)
            if [ -n "$package_list" ]; then
              package_list=$(echo "$package_list" | sed -z 's/\n$//' || echo "$package_list")
            fi

            if [ "$package_count" -eq 0 ]; then
              package_list="‚ö†Ô∏è No package.json files detected. You may need to add them manually."
            else
              echo "‚úÖ Detected $package_count package(s)"
            fi

            # Basic markdown safety validation (package names are from jq .name)
            # Skip strict validation as package names come from trusted package.json files
            # Only check for obvious injection attempts
            if echo "$package_list" | grep -qE '\]\([^)]*https?://'; then
              echo "‚ùå Unexpected link detected in package list"
              cd "$GITHUB_WORKSPACE"
              rm -rf "$temp_dir" "$lock_file"
              trap - EXIT ERR
              continue
            fi

            # Create PR (using printf for safer multi-line body)
            pr_body=$(printf '%s\n\n%s\n\n%s\n\n%s\n%s\n%s\n\n%s\n\n%s\n%s\n%s\n\n%s\n\n%s\n\n%s\n\n%s\n%s\n%s\n\n%s\n%s\n%s\n%s\n%s\n\n%s\n\n%s\n\n%s' \
              "## ü§ñ UPM Auto-Publishing Workflow" \
              "This PR adds automated Unity Package Manager (UPM) publishing to this repository." \
              "### What This Does" \
              "- **Triggers**: Automatically when \`package.json\` is updated on \`${default_branch}\`" \
              "- **Action**: Publishes packages to \`upm.the1studio.org\`" \
              "- **Registry**: Uses organization-level \`NPM_TOKEN\` secret" \
              "### How to Use After Merge" \
              "1. Update version in your \`package.json\`" \
              "2. Commit and push to ${default_branch}" \
              "3. GitHub Actions automatically publishes" \
              "### Package Details" \
              "${package_list}" \
              "### Documentation" \
              "- [UPM Auto Publisher](https://github.com/The1Studio/UPMAutoPublisher)" \
              "- [Setup Instructions](https://github.com/The1Studio/UPMAutoPublisher/blob/master/docs/setup-instructions.md)" \
              "- [Troubleshooting](https://github.com/The1Studio/UPMAutoPublisher/blob/master/docs/troubleshooting.md)" \
              "### Checklist" \
              "- [ ] Review detected packages above" \
              "- [ ] Review workflow file" \
              "- [ ] Ensure \`NPM_TOKEN\` secret is set in organization settings" \
              "- [ ] Merge PR" \
              "- [ ] Test with a version bump" \
              "---" \
              "ü§ñ This PR was automatically created by the UPM Auto Publisher registration system." \
              "Repository registered: ${commit_date}")

            pr_url=$(gh pr create \
              --title "ü§ñ Add UPM Auto-Publishing Workflow" \
              --body "$pr_body" \
              --base "$default_branch" \
              --head "$branch_name" \
              2>&1)
            pr_create_status=$?

            if [ $pr_create_status -eq 0 ]; then
              echo "‚úÖ Pull request created: ${pr_url}"
              echo "üìß PR URL: ${pr_url}"

              # Add comment (using printf for safety)
              pr_comment=$(printf '%s\n\n%s\n\n%s\n%s\n%s\n\n%s\n\n%s\n%s\n%s\n\n%s' \
                "### ‚öôÔ∏è Post-Merge Actions" \
                "After merging this PR:" \
                "1. **Test the workflow**: Update a package version and push to trigger auto-publishing" \
                "2. **Status auto-updates**: Within 6 hours, the status will automatically change from \`pending\` to \`active\` in UPMAutoPublisher's \`repositories.json\`" \
                "   - Or manually trigger: \`gh workflow run sync-repo-status.yml\` in UPMAutoPublisher" \
                "### Registry Configuration" \
                "The workflow is configured to publish to:" \
                "- **Registry**: Configured via \`UPM_REGISTRY\` variable (default: \`https://upm.the1studio.org/\`)" \
                "- **Authentication**: Uses organization-level \`NPM_TOKEN\` secret" \
                "No need to set \`publishConfig.registry\` in your package.json - the workflow handles registry configuration automatically.")
              gh pr comment "$pr_url" --body "$pr_comment" || echo "‚ö†Ô∏è  Failed to add PR comment (non-fatal)"

            else
              echo "‚ùå Failed to create pull request"
              echo "Error: ${pr_url}"
            fi

            # Cleanup
            cd "$GITHUB_WORKSPACE"
            rm -rf "$temp_dir" "$lock_file"
            trap - EXIT ERR

            echo ""
            echo "========================================="
            echo "‚úÖ Completed processing ${repo}"
            echo "========================================="
          done

          echo ""
          echo "========================================="
          echo "üìä Registration Summary"
          echo "========================================="
          echo "Check the PRs created in target repositories"
          echo "After PRs are merged, status will auto-update to 'active' within 6 hours"
          echo "Or manually trigger: gh workflow run sync-repo-status.yml"

      # FIX: Correct job.status comparison syntax
      - name: Summary
        if: always()
        run: |
          if [ "${{ job.status }}" == 'success' ]; then
            echo "‚úÖ Repository registration workflow completed successfully"
          else
            echo "‚ö†Ô∏è  Some registrations may have failed - check logs above"
          fi
