name: Auto-Register Repositories

# Triggers when repositories.json is updated
on:
  push:
    branches:
      - master
      - main
    paths:
      - 'config/repositories.json'

# FIX ME-6: Explicit permissions for security and clarity
permissions:
  contents: write         # Push branches to target repos
  pull-requests: write    # Create PRs in target repos
  issues: write           # Comment on PRs

jobs:
  register-repos:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # FIX: Add job-level timeout
    name: Deploy UPM workflow to registered repositories

    steps:
      - name: Checkout UPMAutoPublisher
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      # FIX: Validate JSON schema before processing
      - name: Validate repositories.json
        run: |
          npm install -g ajv-cli
          ajv validate -s config/schema.json -d config/repositories.json
          if [ $? -ne 0 ]; then
            echo "‚ùå repositories.json validation failed"
            exit 1
          fi
          echo "‚úÖ repositories.json validation passed"

      # FIX: Secure token handling (use printf to avoid variable expansion in command line)
      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          printf '%s' "$GH_TOKEN" | gh auth login --with-token

      - name: Process pending repositories
        timeout-minutes: 25  # FIX: Add step-level timeout
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail  # FIX: Add -u and -o pipefail for better error handling

          echo "========================================="
          echo "üîç Checking for repositories to register"
          echo "========================================="

          # Read repositories with status "pending"
          pending_repos=$(jq -r '.repositories[] | select(.status == "pending") | @json' config/repositories.json)

          if [ -z "$pending_repos" ]; then
            echo "‚ÑπÔ∏è  No pending repositories to register"
            exit 0
          fi

          echo "$pending_repos" | while IFS= read -r repo_json; do
            echo ""
            echo "========================================="
            echo "üìã Processing Repository"
            echo "========================================="

            # FIX: Properly quote all variables
            repo_name=$(echo "$repo_json" | jq -r '.name')
            repo_url=$(echo "$repo_json" | jq -r '.url')

            # FIX: Validate repository name (alphanumeric, dash, underscore only)
            if [[ ! "$repo_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
              echo "‚ùå Invalid repository name: $repo_name"
              echo "   Repository names must contain only letters, numbers, dashes, and underscores"
              continue
            fi

            # FIX: Validate repository URL format (must be GitHub URL)
            if [[ ! "$repo_url" =~ ^https://github\.com/[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$ ]]; then
              echo "‚ùå Invalid repository URL: $repo_url"
              echo "   URL must be in format: https://github.com/org/repo"
              continue
            fi

            echo "üì¶ Repository: ${repo_name}"
            echo "üîó URL: ${repo_url}"

            # Extract org and repo from URL using regex (safer than sed)
            if [[ "$repo_url" =~ ^https://github\.com/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)$ ]]; then
              org="${BASH_REMATCH[1]}"
              repo="${BASH_REMATCH[2]}"
            else
              echo "‚ùå Failed to parse organization and repository from URL"
              continue
            fi

            echo "üè¢ Organization: ${org}"
            echo "üìÅ Repository: ${repo}"

            # Check if repository exists
            if ! gh repo view "${org}/${repo}" >/dev/null 2>&1; then
              echo "‚ùå Repository ${org}/${repo} does not exist or not accessible"
              continue
            fi

            # FIX M-3: Acquire lock FIRST to prevent race condition
            # File-based locking to prevent concurrent workflow runs from processing same repo
            lock_file="/tmp/upm-register-${org}-${repo}.lock"
            if ! mkdir "$lock_file" 2>/dev/null; then
              echo "‚ö†Ô∏è  Another workflow is currently registering this repository, skipping"
              echo "   Lock file: $lock_file"
              continue
            fi

            # Add lock cleanup to trap
            trap "rm -rf '${lock_file}' '${temp_dir}'" EXIT ERR

            # THEN check for existing PRs (after acquiring lock)
            echo "üîç Checking for existing open PRs..."
            existing_pr=$(gh pr list \
              --repo "${org}/${repo}" \
              --state open \
              --head "auto-publish/add-upm-workflow" \
              --json number \
              --jq '.[0].number' 2>/dev/null || echo "")
            if [ -n "$existing_pr" ]; then
              echo "‚ö†Ô∏è  PR #${existing_pr} already exists for UPM workflow, skipping"
              rm -rf "$lock_file"
              trap - EXIT ERR
              continue
            fi

            # Check if workflow already exists
            echo "üîç Checking if workflow already exists..."
            if gh api "repos/${org}/${repo}/contents/.github/workflows/publish-upm.yml" >/dev/null 2>&1; then
              echo "‚ö†Ô∏è  Workflow already exists in ${repo_name}"
              echo "‚ÑπÔ∏è  Skipping deployment (manual update status to 'active' if confirmed)"
              continue
            fi

            echo "üöÄ Deploying workflow to ${org}/${repo}..."

            # Create temp directory for cloning
            temp_dir=$(mktemp -d)
            # Update trap to include temp_dir
            trap "rm -rf '${lock_file}' '${temp_dir}'" EXIT ERR

            # FIX: Validate temp directory exists before cd
            if [ ! -d "$temp_dir" ]; then
              echo "‚ùå Failed to create temp directory"
              rm -rf "$lock_file"
              trap - EXIT ERR
              continue
            fi

            # FIX: Safe directory change with error handling
            if ! cd "$temp_dir"; then
              echo "‚ùå Failed to change directory to $temp_dir"
              rm -rf "$temp_dir" "$lock_file"
              trap - EXIT ERR
              continue
            fi

            echo "üì• Cloning ${org}/${repo}..."
            if ! gh repo clone "${org}/${repo}" target-repo; then
              echo "‚ùå Failed to clone repository"
              rm -rf "$temp_dir" "$lock_file"
              trap - EXIT ERR
              continue
            fi

            # FIX: Validate cloned directory exists before cd
            if [ ! -d "target-repo" ]; then
              echo "‚ùå Cloned directory does not exist: target-repo"
              cd "$GITHUB_WORKSPACE"
              rm -rf "$temp_dir" "$lock_file"
              trap - EXIT ERR
              continue
            fi

            # FIX: Safe directory change with error handling
            if ! cd target-repo; then
              echo "‚ùå Failed to change directory to target-repo"
              cd "$GITHUB_WORKSPACE"
              rm -rf "$temp_dir" "$lock_file"
              trap - EXIT ERR
              continue
            fi

            # FIX: Detect default branch instead of assuming master
            echo "üîç Detecting default branch..."
            default_branch=$(gh repo view "${org}/${repo}" --json defaultBranchRef --jq '.defaultBranchRef.name')
            echo "üìç Default branch: ${default_branch}"

            # Create new branch with timestamp and PID for uniqueness
            branch_name="auto-publish/add-upm-workflow-$(date +%s)-$$"
            git checkout -b "$branch_name"

            # Create .github/workflows directory
            mkdir -p .github/workflows

            # FIX: Check if workflow file exists and create backup if different
            workflow_path=".github/workflows/publish-upm.yml"
            if [ -f "$workflow_path" ]; then
              echo "‚ÑπÔ∏è  Workflow file already exists"

              # Check if files are different
              if ! diff -q "$GITHUB_WORKSPACE/.github/workflows/publish-upm.yml" "$workflow_path" >/dev/null 2>&1; then
                echo "‚ö†Ô∏è  Existing workflow is different from template"

                # Create backup with timestamp
                backup_path="${workflow_path}.backup-$(date +%Y%m%d-%H%M%S)"
                cp "$workflow_path" "$backup_path"
                echo "üì¶ Created backup: $backup_path"

                # Copy new version
                echo "üìù Updating workflow file..."
                cp "$GITHUB_WORKSPACE/.github/workflows/publish-upm.yml" "$workflow_path"
              else
                echo "‚úÖ Workflow file is already up to date, skipping"
                cd "$GITHUB_WORKSPACE"
                rm -rf "$temp_dir" "$lock_file"
                trap - EXIT ERR
                continue
              fi
            else
              # New installation
              echo "üìù Creating workflow file..."
              cp "$GITHUB_WORKSPACE/.github/workflows/publish-upm.yml" "$workflow_path"
            fi

            # FIX: Properly escape commit message to prevent shell injection
            commit_date=$(date -u +%Y-%m-%d)

            # Use here-doc for commit message (safer than string interpolation)
            git config user.name "UPM Auto Publisher Bot"
            git config user.email "noreply@the1studio.org"
            git add .github/workflows/publish-upm.yml

            git commit -F - <<EOF
Add UPM auto-publishing workflow

This workflow automatically publishes Unity packages to upm.the1studio.org when package.json versions are updated.

Setup by UPM Auto Publisher system.
Repository: ${repo_name}
Date: ${commit_date}

Co-Authored-By: UPM Auto Publisher <noreply@the1studio.org>
EOF

            # Push branch
            echo "‚¨ÜÔ∏è  Pushing branch ${branch_name}..."
            if ! git push origin "$branch_name"; then
              echo "‚ùå Failed to push branch"
              cd "$GITHUB_WORKSPACE"
              rm -rf "$temp_dir" "$lock_file"
              trap - EXIT ERR
              continue
            fi

            # Create pull request using here-doc for body (safer)
            echo "üéØ Creating pull request..."

            # FIX M-1: Extract package list safely and validate for markdown injection
            package_list=$(echo "$repo_json" | jq -r '.packages[] | "- **\(.name)** at `\(.path)`"')
            package_paths=$(echo "$repo_json" | jq -r '.packages[] | "- `\(.path)/package.json`"')

            # Validate no markdown injection attempts
            if echo "$package_list" | grep -q ']\(http\|javascript:'; then
              echo "‚ùå Potential markdown injection detected in package list"
              cd "$GITHUB_WORKSPACE"
              rm -rf "$temp_dir" "$lock_file"
              trap - EXIT ERR
              continue
            fi

            pr_body=$(cat <<EOF
## ü§ñ UPM Auto-Publishing Workflow

This PR adds automated Unity Package Manager (UPM) publishing to this repository.

### What This Does

- **Triggers**: Automatically when \`package.json\` is updated on \`${default_branch}\`
- **Action**: Publishes packages to \`upm.the1studio.org\`
- **Registry**: Uses organization-level \`NPM_TOKEN\` secret

### How to Use After Merge

1. Update version in your \`package.json\`
2. Commit and push to ${default_branch}
3. GitHub Actions automatically publishes

### Package Details

${package_list}

### Documentation

- [UPM Auto Publisher](https://github.com/The1Studio/UPMAutoPublisher)
- [Setup Instructions](https://github.com/The1Studio/UPMAutoPublisher/blob/master/docs/setup-instructions.md)
- [Troubleshooting](https://github.com/The1Studio/UPMAutoPublisher/blob/master/docs/troubleshooting.md)

### Checklist

- [ ] Verify package.json has \`publishConfig.registry: https://upm.the1studio.org/\`
- [ ] Confirm package names are correct
- [ ] Review workflow file
- [ ] Merge PR
- [ ] Test with a version bump

---

ü§ñ This PR was automatically created by the UPM Auto Publisher registration system.

Repository registered: ${commit_date}
EOF
)

            pr_url=$(gh pr create \
              --title "ü§ñ Add UPM Auto-Publishing Workflow" \
              --body "$pr_body" \
              --base "$default_branch" \
              --head "$branch_name" \
              2>&1)

            if [ $? -eq 0 ]; then
              echo "‚úÖ Pull request created: ${pr_url}"
              echo "üìß PR URL: ${pr_url}"

              # Add comment with additional info using here-doc
              comment_body=$(cat <<EOF
### ‚öôÔ∏è Configuration Check

Please verify these package.json files have the correct configuration:

\`\`\`json
{
  "name": "com.theone.package",
  "version": "1.0.0",
  "publishConfig": {
    "registry": "https://upm.the1studio.org/"
  }
}
\`\`\`

**Packages to verify:**
${package_paths}

After merging, update \`config/repositories.json\` in UPMAutoPublisher to change status from \`pending\` to \`active\`.
EOF
)

              gh pr comment "$pr_url" --body "$comment_body" || echo "‚ö†Ô∏è  Failed to add PR comment (non-fatal)"

            else
              echo "‚ùå Failed to create pull request"
              echo "Error: ${pr_url}"
            fi

            # Cleanup
            cd "$GITHUB_WORKSPACE"
            rm -rf "$temp_dir" "$lock_file"
            trap - EXIT ERR

            echo ""
            echo "========================================="
            echo "‚úÖ Completed processing ${repo_name}"
            echo "========================================="
          done

          echo ""
          echo "========================================="
          echo "üìä Registration Summary"
          echo "========================================="
          echo "Check the PRs created in target repositories"
          echo "After PRs are merged, update status to 'active' in repositories.json"

      # FIX: Correct job.status comparison syntax
      - name: Summary
        if: always()
        run: |
          if [ "${{ job.status }}" == 'success' ]; then
            echo "‚úÖ Repository registration workflow completed successfully"
          else
            echo "‚ö†Ô∏è  Some registrations may have failed - check logs above"
          fi
