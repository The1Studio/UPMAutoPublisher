name: Publish Unpublished Packages

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Dry run (don't actually publish)"
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
  schedule:
    # Run every Sunday at 2:00 AM UTC (after weekly package cache rebuild)
    - cron: '0 2 * * 0'

jobs:
  publish-unpublished:
    name: Batch Publish Unpublished Packages
    runs-on: [self-hosted, arc, the1studio, org]
    outputs:
      total_processed: ${{ steps.summary.outputs.total_processed }}
      successful: ${{ steps.summary.outputs.successful }}
      failed: ${{ steps.summary.outputs.failed }}
      skipped: ${{ steps.summary.outputs.skipped }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # Fix APT sources to use HTTPS instead of HTTP (port 80 blocked)
          sudo sed -i 's|http://archive.ubuntu.com|https://archive.ubuntu.com|g' /etc/apt/sources.list
          sudo sed -i 's|http://security.ubuntu.com|https://security.ubuntu.com|g' /etc/apt/sources.list

          # Disable PPA repositories
          sudo mv /etc/apt/sources.list.d /etc/apt/sources.list.d.bak 2>/dev/null || true
          sudo mkdir -p /etc/apt/sources.list.d

          sudo apt-get update -qq
          sudo apt-get install -y -qq jq

          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: ${{ vars.UPM_REGISTRY || 'https://upm.the1studio.org/' }}

      - name: Configure NPM authentication
        run: |
          npm config set "//${{ vars.UPM_REGISTRY || 'upm.the1studio.org' }}/:_authToken" "${{ secrets.NPM_TOKEN }}"

      - name: Verify package cache exists
        run: |
          if [ ! -f "config/package-cache.json" ]; then
            echo "‚ùå package-cache.json not found!"
            echo "Run 'build-package-cache' workflow first"
            exit 1
          fi

      - name: Count unpublished packages
        id: count
        run: |
          count=$(jq '[.packages[] | select(.status == "new")] | length' config/package-cache.json)
          echo "count=$count" >> $GITHUB_OUTPUT
          echo "üì¶ Found $count unpublished packages"

          if [ "$count" -eq 0 ]; then
            echo "‚úÖ No unpublished packages found"
            exit 0
          fi

      - name: Publish unpublished packages
        if: steps.count.outputs.count > 0
        env:
          DRY_RUN: ${{ inputs.dry_run || 'false' }}
          UPM_REGISTRY: ${{ vars.UPM_REGISTRY || 'https://upm.the1studio.org/' }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Starting batch publish process"
          echo "Dry run: $DRY_RUN"
          echo ""

          success=0
          failed=0
          skipped=0
          failed_packages=""

          # Get unique repositories with unpublished packages
          repos=$(jq -r '[.packages[] | select(.status == "new") | .repository] | unique | .[]' config/package-cache.json)

          for repo in $repos; do
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "üì¶ Repository: $repo"
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

            # Get all unpublished packages for this repo
            packages=$(jq -r ".packages[] | select(.repository == \"$repo\" and .status == \"new\") | \"\(.package_path)|\(.name)@\(.source_version)\"" config/package-cache.json)

            if [ -z "$packages" ]; then
              echo "‚ö†Ô∏è  No unpublished packages in this repo"
              continue
            fi

            # Clone repository
            temp_dir=$(mktemp -d)
            cd "$temp_dir" || exit 1

            echo "üì• Cloning repository..."
            if ! gh repo clone "$repo" repo > /dev/null 2>&1; then
              echo "‚ùå Failed to clone repository"
              # Count all packages in this repo as failed
              pkg_count=$(echo "$packages" | wc -l)
              failed=$((failed + pkg_count))
              cd - > /dev/null
              rm -rf "$temp_dir"
              continue
            fi

            cd repo || exit 1

            # Process each package
            while IFS='|' read -r path package_info; do
              echo "   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
              echo "   üì¶ $package_info"
              echo "   üìÅ Path: $path"

              if [ ! -d "$path" ]; then
                echo "   ‚ùå Path not found in repository"
                ((failed++))
                failed_packages="$failed_packages\n   - $package_info (path not found)"
                continue
              fi

              if [ ! -f "$path/package.json" ]; then
                echo "   ‚ùå package.json not found"
                ((failed++))
                failed_packages="$failed_packages\n   - $package_info (no package.json)"
                continue
              fi

              cd "$path" || { echo "   ‚ùå Cannot cd to path"; ((failed++)); continue; }

              # Verify package.json is valid
              if ! jq empty package.json 2>/dev/null; then
                echo "   ‚ùå Invalid package.json"
                ((failed++))
                failed_packages="$failed_packages\n   - $package_info (invalid JSON)"
                cd - > /dev/null
                continue
              fi

              # Extract package name and version
              pkg_name=$(jq -r '.name' package.json)
              pkg_version=$(jq -r '.version' package.json)

              echo "   üìù Name: $pkg_name"
              echo "   üè∑Ô∏è  Version: $pkg_version"

              # Check if already published (double-check)
              if npm view "$pkg_name@$pkg_version" --registry "$UPM_REGISTRY" > /dev/null 2>&1; then
                echo "   ‚ö†Ô∏è  Already published, skipping"
                ((skipped++))
                cd - > /dev/null
                continue
              fi

              # Publish package
              if [ "$DRY_RUN" = "true" ]; then
                echo "   üîç DRY RUN: Would publish $pkg_name@$pkg_version"
                if npm publish --dry-run --registry "$UPM_REGISTRY" 2>&1; then
                  echo "   ‚úÖ Dry run successful"
                  ((success++))
                else
                  echo "   ‚ùå Dry run failed"
                  ((failed++))
                  failed_packages="$failed_packages\n   - $package_info (dry run failed)"
                fi
              else
                echo "   üì§ Publishing to $UPM_REGISTRY..."
                if npm publish --registry "$UPM_REGISTRY" 2>&1; then
                  echo "   ‚úÖ Published successfully"
                  ((success++))
                else
                  echo "   ‚ùå Failed to publish"
                  ((failed++))
                  failed_packages="$failed_packages\n   - $package_info"
                fi
              fi

              cd - > /dev/null
              echo ""
            done <<< "$packages"

            # Cleanup repo
            cd - > /dev/null
            cd - > /dev/null
            rm -rf "$temp_dir"

            echo ""
          done

          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìä Batch Publish Summary"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚úÖ Published: $success"
          echo "‚ö†Ô∏è  Skipped (already published): $skipped"
          echo "‚ùå Failed: $failed"
          echo "üéØ Total processed: $((success + skipped + failed))"

          if [ $failed -gt 0 ]; then
            echo ""
            echo "‚ùå Failed packages:"
            echo -e "$failed_packages"
            exit 1
          fi

          echo ""
          echo "‚úÖ Batch publish completed successfully!"

          # Set outputs for Discord notification
          echo "total_processed=$((success + skipped + failed))" >> $GITHUB_OUTPUT
          echo "successful=$success" >> $GITHUB_OUTPUT
          echo "failed=$failed" >> $GITHUB_OUTPUT
          echo "skipped=$skipped" >> $GITHUB_OUTPUT

      - name: Set summary outputs
        id: summary
        if: always()
        run: |
          # This step ensures outputs are set even if the publish step fails early
          echo "total_processed=0" >> $GITHUB_OUTPUT
          echo "successful=0" >> $GITHUB_OUTPUT
          echo "failed=0" >> $GITHUB_OUTPUT
          echo "skipped=0" >> $GITHUB_OUTPUT

      - name: Rebuild package cache
        if: success() && (inputs.dry_run == 'false' || github.event_name == 'schedule')
        run: |
          echo "üîÑ Rebuilding package cache after publishing..."
          if [ -x "./scripts/build-package-cache.sh" ]; then
            ./scripts/build-package-cache.sh
          else
            echo "‚ö†Ô∏è  build-package-cache.sh not found or not executable"
          fi

      - name: Commit updated cache
        if: success() && (inputs.dry_run == 'false' || github.event_name == 'schedule')
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git diff --quiet config/package-cache.json; then
            echo "‚ÑπÔ∏è  No changes to package cache"
          else
            git add config/package-cache.json
            git commit -m "$(cat <<'EOF'
          Update package cache after batch publish

          Published packages are now marked as up-to-date in the cache.

          ü§ñ Generated with [Claude Code](https://claude.com/claude-code)

          Co-Authored-By: Claude <noreply@anthropic.com>
          EOF
          )"
            git push
            echo "‚úÖ Package cache updated"
          fi

  notify-discord:
    runs-on: [self-hosted, arc, the1studio, org]
    needs: publish-unpublished
    if: always()
    steps:
      - name: Send Discord notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ needs.publish-unpublished.result }}
          title: "üì¶ Batch Publish Unpublished Packages"
          description: |
            **Workflow:** Publish Unpublished
            **Trigger:** ${{ github.event_name == 'schedule' && 'Scheduled (Weekly)' || 'Manual' }}
            **Dry Run:** ${{ inputs.dry_run || 'false' }}

            **üìä Results:**
            ‚Ä¢ Total Processed: `${{ needs.publish-unpublished.outputs.total_processed || '0' }}`
            ‚Ä¢ ‚úÖ Published: `${{ needs.publish-unpublished.outputs.successful || '0' }}`
            ‚Ä¢ ‚ö†Ô∏è  Skipped: `${{ needs.publish-unpublished.outputs.skipped || '0' }}`
            ‚Ä¢ ‚ùå Failed: `${{ needs.publish-unpublished.outputs.failed || '0' }}`

            **üîó Links:**
            ‚Ä¢ [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            ‚Ä¢ [Package Cache](${{ github.server_url }}/${{ github.repository }}/blob/master/config/package-cache.json)
          color: ${{ needs.publish-unpublished.result == 'success' && '0x48C21B' || needs.publish-unpublished.result == 'failure' && '0xFF0000' || '0xFFCC00' }}
          username: "THE 1 GAME STUDIO"
          avatar_url: "https://raw.githubusercontent.com/The1Studio/UPMAutoPublisher/master/.github/assets/the1studio-logo.png"
